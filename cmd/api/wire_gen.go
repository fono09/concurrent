// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/redis/go-redis/v9"
	"github.com/totegamma/concurrent/x/agent"
	"github.com/totegamma/concurrent/x/association"
	"github.com/totegamma/concurrent/x/auth"
	"github.com/totegamma/concurrent/x/character"
	"github.com/totegamma/concurrent/x/domain"
	"github.com/totegamma/concurrent/x/entity"
	"github.com/totegamma/concurrent/x/message"
	"github.com/totegamma/concurrent/x/socket"
	"github.com/totegamma/concurrent/x/stream"
	"github.com/totegamma/concurrent/x/userkv"
	"github.com/totegamma/concurrent/x/util"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func SetupMessageHandler(db *gorm.DB, rdb *redis.Client, config util.Config) *message.Handler {
	repository := message.NewRepository(db)
	streamRepository := stream.NewRepository(db)
	entityRepository := entity.NewRepository(db)
	service := entity.NewService(entityRepository, config)
	streamService := stream.NewService(rdb, streamRepository, service, config)
	messageService := message.NewService(rdb, repository, streamService)
	handler := message.NewHandler(messageService)
	return handler
}

func SetupCharacterHandler(db *gorm.DB, config util.Config) *character.Handler {
	repository := character.NewRepository(db)
	service := character.NewService(repository)
	handler := character.NewHandler(service)
	return handler
}

func SetupAssociationHandler(db *gorm.DB, rdb *redis.Client, config util.Config) *association.Handler {
	repository := association.NewRepository(db)
	streamRepository := stream.NewRepository(db)
	entityRepository := entity.NewRepository(db)
	service := entity.NewService(entityRepository, config)
	streamService := stream.NewService(rdb, streamRepository, service, config)
	messageRepository := message.NewRepository(db)
	messageService := message.NewService(rdb, messageRepository, streamService)
	associationService := association.NewService(rdb, repository, streamService, messageService)
	handler := association.NewHandler(associationService, messageService)
	return handler
}

func SetupStreamHandler(db *gorm.DB, rdb *redis.Client, config util.Config) *stream.Handler {
	repository := stream.NewRepository(db)
	entityRepository := entity.NewRepository(db)
	service := entity.NewService(entityRepository, config)
	streamService := stream.NewService(rdb, repository, service, config)
	handler := stream.NewHandler(streamService)
	return handler
}

func SetupDomainHandler(db *gorm.DB, config util.Config) *domain.Handler {
	repository := domain.NewRepository(db)
	service := domain.NewService(repository)
	handler := domain.NewHandler(service, config)
	return handler
}

func SetupEntityHandler(db *gorm.DB, rdb *redis.Client, config util.Config) *entity.Handler {
	repository := entity.NewRepository(db)
	service := entity.NewService(repository, config)
	handler := entity.NewHandler(service, rdb, config)
	return handler
}

func SetupSocketHandler(rdb *redis.Client, config util.Config) *socket.Handler {
	service := socket.NewService()
	handler := socket.NewHandler(service, rdb)
	return handler
}

func SetupAgent(db *gorm.DB, rdb *redis.Client, config util.Config) *agent.Agent {
	repository := domain.NewRepository(db)
	service := domain.NewService(repository)
	entityRepository := entity.NewRepository(db)
	entityService := entity.NewService(entityRepository, config)
	agentAgent := agent.NewAgent(rdb, config, service, entityService)
	return agentAgent
}

func SetupAuthHandler(db *gorm.DB, config util.Config) *auth.Handler {
	repository := entity.NewRepository(db)
	service := entity.NewService(repository, config)
	domainRepository := domain.NewRepository(db)
	domainService := domain.NewService(domainRepository)
	authService := auth.NewService(config, service, domainService)
	handler := auth.NewHandler(authService)
	return handler
}

func SetupAuthService(db *gorm.DB, config util.Config) *auth.Service {
	repository := entity.NewRepository(db)
	service := entity.NewService(repository, config)
	domainRepository := domain.NewRepository(db)
	domainService := domain.NewService(domainRepository)
	authService := auth.NewService(config, service, domainService)
	return authService
}

func SetupUserkvHandler(db *gorm.DB, rdb *redis.Client, config util.Config) *userkv.Handler {
	repository := userkv.NewRepository(rdb)
	service := userkv.NewService(repository)
	entityRepository := entity.NewRepository(db)
	entityService := entity.NewService(entityRepository, config)
	handler := userkv.NewHandler(service, entityService)
	return handler
}

// wire.go:

var domainHandlerProvider = wire.NewSet(domain.NewHandler, domain.NewService, domain.NewRepository)

var entityHandlerProvider = wire.NewSet(entity.NewHandler, entity.NewService, entity.NewRepository)

var streamHandlerProvider = wire.NewSet(stream.NewHandler, stream.NewService, stream.NewRepository, entity.NewService, entity.NewRepository)

var messageHandlerProvider = wire.NewSet(message.NewHandler, message.NewService, message.NewRepository)

var characterHandlerProvider = wire.NewSet(character.NewHandler, character.NewService, character.NewRepository)

var associationHandlerProvider = wire.NewSet(association.NewHandler, association.NewService, association.NewRepository, message.NewService, message.NewRepository)

var userkvHandlerProvider = wire.NewSet(userkv.NewHandler, userkv.NewService, userkv.NewRepository)
