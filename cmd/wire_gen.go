// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/redis/go-redis/v9"
	"github.com/totegamma/concurrent/x/agent"
	"github.com/totegamma/concurrent/x/association"
	"github.com/totegamma/concurrent/x/character"
	"github.com/totegamma/concurrent/x/entity"
	"github.com/totegamma/concurrent/x/host"
	"github.com/totegamma/concurrent/x/message"
	"github.com/totegamma/concurrent/x/socket"
	"github.com/totegamma/concurrent/x/stream"
	"github.com/totegamma/concurrent/x/util"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func SetupMessageHandler(db *gorm.DB, client *redis.Client, socket2 *socket.Service) *message.Handler {
	repository := message.NewRepository(db)
	streamRepository := stream.NewRepository(db)
	entityRepository := entity.NewRepository(db)
	service := entity.NewService(entityRepository)
	streamService := stream.NewService(client, streamRepository, service)
	messageService := message.NewService(repository, streamService, socket2)
	handler := message.NewHandler(messageService)
	return handler
}

func SetupCharacterHandler(db *gorm.DB) *character.Handler {
	repository := character.NewRepository(db)
	service := character.NewService(repository)
	handler := character.NewHandler(service)
	return handler
}

func SetupAssociationHandler(db *gorm.DB, client *redis.Client, socket2 *socket.Service) *association.Handler {
	repository := association.NewRepository(db)
	streamRepository := stream.NewRepository(db)
	entityRepository := entity.NewRepository(db)
	service := entity.NewService(entityRepository)
	streamService := stream.NewService(client, streamRepository, service)
	associationService := association.NewService(repository, streamService, socket2)
	handler := association.NewHandler(associationService)
	return handler
}

func SetupStreamHandler(db *gorm.DB, client *redis.Client) *stream.Handler {
	repository := stream.NewRepository(db)
	entityRepository := entity.NewRepository(db)
	service := entity.NewService(entityRepository)
	streamService := stream.NewService(client, repository, service)
	handler := stream.NewHandler(streamService)
	return handler
}

func SetupHostHandler(db *gorm.DB, config util.Config) *host.Handler {
	repository := host.NewRepository(db)
	service := host.NewService(repository)
	handler := host.NewHandler(service, config)
	return handler
}

func SetupEntityHandler(db *gorm.DB) *entity.Handler {
	repository := entity.NewRepository(db)
	service := entity.NewService(repository)
	handler := entity.NewHandler(service)
	return handler
}

func SetupSocketHandler(socketService *socket.Service) *socket.Handler {
	handler := socket.NewHandler(socketService)
	return handler
}

func SetupAgent(db *gorm.DB) *agent.Agent {
	repository := host.NewRepository(db)
	service := host.NewService(repository)
	entityRepository := entity.NewRepository(db)
	entityService := entity.NewService(entityRepository)
	agentAgent := agent.NewAgent(service, entityService)
	return agentAgent
}

// wire.go:

var hostHandlerProvider = wire.NewSet(host.NewHandler, host.NewService, host.NewRepository)

var entityHandlerProvider = wire.NewSet(entity.NewHandler, entity.NewService, entity.NewRepository)

var streamHandlerProvider = wire.NewSet(stream.NewHandler, stream.NewService, stream.NewRepository, entity.NewService, entity.NewRepository)

var messageHandlerProvider = wire.NewSet(message.NewHandler, message.NewService, message.NewRepository)

var characterHandlerProvider = wire.NewSet(character.NewHandler, character.NewService, character.NewRepository)

var associationHandlerProvider = wire.NewSet(association.NewHandler, association.NewService, association.NewRepository)
